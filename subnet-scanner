#!/bin/bash

# Define a help() function to help and guide the user in case of errors
help()
{
		printf "\n\tUsage:\tsudo ./subnet-scanner A.B.C.D/E [-f] [-r] [-b] [-n] [-a] [-g] [-N] [-h]\n"
		printf "\t\t\t[ -f | --force ]\tforce the scan on the target host or target subnet by skipping the fping discovery step (use with -N when ICMP is likely blocked)\n"
		printf "\t\t\t[ -r | --rustscan ]\tperform rustscan scan\n"
		printf "\t\t\t[ -b | --batch-size ] <batch-size>\tthe rustscan batch size (# of scanned ports at a time) for port scanning,\n"
		printf "\t\t\t\t\t\t\t\tit increases or slows the speed of scanning, 3000 by default\n"
		printf "\t\t\t[ -n | --nmap ]\t\tperform nmap scan\n"
		printf "\t\t\t[ -a | --all ]\t\tperform both rustscan AND nmap scans (default if no switch specified)\n"
		printf "\t\t\t[ -g | --goscan ]\tperform an optional goscan scan\n"
		printf "\t\t\t[ -N | --nping ]\toption to perform nping scan for hosts/subnets that may block ICMP,\n"
		printf "\t\t\t\t\t\ta target port can be specified, 53 is used by default\n"
		printf "\t\t\t\t\t\tNote: it can be slow on large subnets and is therefore excluded from the -a | --all option\n"		
		printf "\t\t\t[ -h | --help ]\n"
		exit 2
}

# At least one subnet A.B.C.D/E argument must be passed in
# If no argument (target subnet) and no options are provided, display the error and help messages
ARG1=$1
if [ -z "$ARG1" ]
then
	printf "\n\t[Error] No argument provided"
	printf "\n\t[Error] At a minimum, a subnet A.B.C.D/E must be passed in as argument for the scan to start"
	echo
	help
fi

# Set defaults for default behaviour
fpingFlag=true
rustscanFlag=false
nmapFlag=false
allFlag=false
npingFlag=false
goscanFlag=false
rustscanBatchFlag=false
rustscanBatchSize=3000

# Replace long arguments
args=()
for arg; do
		case "$arg" in
				--force)		args+=( -f ) ;;
				--rustscan)		args+=( -r ) ;;
				--batch-size)	args+=( -b ) ;;
				--nmap)			args+=( -n ) ;;
				--all)			args+=( -a ) ;;
				--goscan)		args+=( -g ) ;;
				--nping)		args+=( -N ) ;;
				--help)			args+=( -h ) ;;
                *)				args+=( "$arg" ) ;;
    esac
done
set -- "${args[@]}"

# Handle positional arguments provided before switch options
new_args=()
while [ $OPTIND -le "$#" ]
do
	CURRENTARG=${!OPTIND}
		if getopts ":frbnaghN" option
		then
				case $option
				in
						f)	(( OPTIONCOUNT = OPTIONCOUNT + 1 ))
								forceFlag=true ;;
						r)	(( OPTIONCOUNT = OPTIONCOUNT + 1 ))
								rustscanFlag=true ;;
						b)	(( OPTIONCOUNT = OPTIONCOUNT + 1 ))
								rustscanBatchFlag=true
								# Check next positional parameter
								eval nextopt=\${$OPTIND}
								# existing or starting with dash?
								if [[ -n $nextopt && $nextopt != -* ]] ; then
									OPTIND=$((OPTIND + 1))
									rustscanBatchSize=$nextopt
								else
									rustscanBatchSize=3000
								fi
						;;
						n)	(( OPTIONCOUNT = OPTIONCOUNT + 1 ))
								nmapFlag=true ;;
						a)	(( OPTIONCOUNT = OPTIONCOUNT + 1 ))
								allFlag=true ;;
						g)	(( OPTIONCOUNT = OPTIONCOUNT + 1 ))
								goscanFlag=true ;;
						N)	(( OPTIONCOUNT = OPTIONCOUNT + 1 ))
								npingFlag=true
								# Check next positional parameter
								eval nextopt=\${$OPTIND}
								# existing or starting with dash?
								if [[ -n $nextopt && $nextopt != -* ]] ; then
									OPTIND=$((OPTIND + 1))
									npingTargetPort=$nextopt
								else
									npingTargetPort=53
								fi
						;;
						h)	help ;;
								*)	# Display help message if unsupported option is provided
								printf "\t[Error] Unsupported option: $CURRENTARG\n"
								help ;;
                esac
		else
				new_args+=("${!OPTIND}")
				((OPTIND++))
		fi
done

# Evaluate if there is at least one element (a target subnet A.B.C.D/E) left in new_args
if [ ${#new_args[@]} = 0 ]
then
	printf "\n\t[Error] Only options were provided, but no subnet to scan"
	printf "\n\t[Error] At a minimum, a subnet A.B.C.D/E must be passed in as argument for the scan to start"
	echo
	help
fi

# If neither -r nor -n options, then default to run both
if  [ "${rustscanFlag}" = false ] && [ "${nmapFlag}" = false ] && [ "${goscanFlag}" = false ]
then
	allFlag=true
fi
if [ "${allFlag}" = true ]
then
	rustscanFlag=true
	nmapFlag=true
fi

############################################################################################################################

dash="-"
underscore="_"
empty=""
dot="."
forwardSlash="/"
space=" "
colon=":"

timePrint="$(date)"

timeNow="$(date +%F_%H:%M:%S)"
timeSuffix1=$(echo "${timeNow//$colon/$empty}")
timeSuffix=$(echo "-${timeSuffix1//$dash/$empty}")

subnetEntry="${new_args[0]}"
subnetSuffix1=$(echo "${subnetEntry//$dot/$dot}")
subnetSuffix=$(echo "-${subnetSuffix1//$forwardSlash/$underscore}")

printf "Started on $timePrint!\n\n"

############################################################################################################################

echo "***** Scanning $subnetEntry *****"
echo

SCANOPTIONNB=1

if [ "${forceFlag}" = true ]
then
	# if user wants to "force" the scan, we will
	# (1) set the live_hosts_file_in_use to be the "./live_hosts_forced.txt" file
	# (2) copy the target host (/32) or target subnet to live_hosts_file_in_use (./live_hosts_forced.txt)
	# (3) skip the fping step (since the scan is forced, no need for fping discovery)
	# (4) use the live_hosts_file_in_use (./live_hosts_forced.txt) subsequently
	live_hosts_file_in_use="./live_hosts_forced.txt"
	echo "$subnetEntry" > ${live_hosts_file_in_use}
else
	# if scan is not forced, we need to perform fping discovery
	# we set the live_hosts_file_in_use to be the "./live_hosts.txt" file
	live_hosts_file_in_use="./live_hosts.txt"
	printf "\t($SCANOPTIONNB) Running fping and saving output to ./fping.txt\n"
	fping -a -g $subnetEntry 2>/dev/null > fping.txt
	# One problem with fping is that it will include the scanning-host local IP address if that address belongs to the scanned subnet.
	# We want to remove it with the lines below:
	ip a | grep "inet " | cut -d " " -f 6 | cut -d "/" -f 1 | grep -vw "127.0.0.1" | while read LINE
		do
			cat ./fping.txt | grep -vw "$LINE" > temp && mv temp ./fping.txt
		done

	printf "\t\tfping found $(wc -l ./fping.txt | cut -d " " -f 1) live host(s) at:\n"
	cat ./fping.txt | while read LINE
		do
			printf "\t\t\t$LINE\n"
		done
	printf "\t($SCANOPTIONNB) fping complete!\n"
	echo

	cp ./fping.txt ${live_hosts_file_in_use}

	((SCANOPTIONNB++))
fi

if [ "${npingFlag}" = true ]
then
	printf "\t($SCANOPTIONNB) Running nping against target port ${npingTargetPort} and saving output to ./nping.txt\n"
	printf "\tnping can be slow, especially on large subnets... please hang on for great findings!\n"
	nping --tcp-connect $subnetEntry -p ${npingTargetPort} -c 1 | awk '/RCVD/ && /completed/ || /Connection refused/' | sed s/'Handshake with '// | sed s/'Possible TCP RST received from '// | cut -d ' ' -f 3 | cut -d ':' -f 1 | uniq > ./nping.txt
	# Remove scanning host IP address from the results:
	ip a | grep "inet " | cut -d " " -f 6 | cut -d "/" -f 1 | grep -vw "127.0.0.1" | while read LINE
			do
					cat ./nping.txt | grep -vw "$LINE" > temp && mv temp ./nping.txt
			done

	printf "\t\tnping found $(wc -l ./nping.txt | cut -d " " -f 1) live host(s) at:\n"
	cat ./nping.txt | while read LINE
			do
					printf "\t\t\t$LINE\n"
			done
	# Merge ./nping.txt with ./fping.txt, remove duplicates and save to ./live_hosts.txt
	cat ./nping.txt | while read LINE
		do
			#echo "$LINE" >> ./live_hosts.txt
			echo "$LINE" >> ${live_hosts_file_in_use}
		done
	#sort ./live_hosts.txt | uniq > temp && mv temp ./live_hosts.txt
	sort ${live_hosts_file_in_use} | uniq > temp && mv temp ${live_hosts_file_in_use}
	printf "\t($SCANOPTIONNB) nping complete!\n"
	echo
	((SCANOPTIONNB++))
fi

if [ "${goscanFlag}" = true ] #|| [ "${allFlag}" = true ]
then
	# cleanup existing ./goscan.txt from previous scan
	sudo rm ./goscan.txt 2>/dev/null
	touch ./goscan.txt
	#cat ./live_hosts.txt | while read LINE
	cat ${live_hosts_file_in_use} | while read LINE	
		do
			# goscan does not seem to work when a /32 target is specified
			# so we add this step to handle this special case
			# since /32 is a single host target, remove the /32 suffix and just keep the IP address part
			if grep -q "/32" <<< $LINE; then
  				printf "\t\t... found /32 target '$LINE' for goscan, removing subnet mask suffix ...\n"
				LINECLEAN=${LINE%"/32"}
				printf "\t\t... to force goscan on single host target: $LINECLEAN\n\n"
			else
				LINECLEAN=$LINE
			fi

			printf "\t($SCANOPTIONNB) Running command: goscan -target $LINECLEAN --all-ports | tee ./goscan_temp.txt\n"
			goscan -target $LINECLEAN --all-ports | tee ./goscan_temp.txt
			cat ./goscan_temp.txt | while read NEWLINE
			do
				echo $NEWLINE >> ./goscan.txt
			done
			sudo rm ./goscan_temp.txt
		done
	printf "\t($SCANOPTIONNB) goscan complete!\n"
	((SCANOPTIONNB++))
	echo
fi

if [ "${rustscanFlag}" = true ] || [ "${allFlag}" = true ]
then
	# cleanup existing ./rustscan.oG and ./rustscan_summary.txt from previous scan
	sudo rm ./rustscan.oG 2>/dev/null
	sudo rm ./rustscan_summary.txt 2>/dev/null
	printf "\t($SCANOPTIONNB) Running command: sudo rustscan -a ${live_hosts_file_in_use} -b ${rustscanBatchSize} -r 1-65535 --ulimit 5000 -- -A --append-output -oG ./rustscan.oG | tee ./rustscan.txt\n"
	printf "\twith target(s) ${live_hosts_file_in_use} =\n"
	cat ${live_hosts_file_in_use} | while read LINE
		do
			printf "\t\t$LINE"
		done
	echo
	#sudo rustscan -a ./live_hosts.txt -r 1-65535 --ulimit 5000 -- -A --append-output -oG ./rustscan.oG | tee ./rustscan.txt
	sudo rustscan -a ${live_hosts_file_in_use} -b ${rustscanBatchSize} -r 1-65535 --ulimit 5000 -- -A --append-output -oG ./rustscan.oG | tee ./rustscan.txt	
	printf "\t($SCANOPTIONNB) rustscan complete!\n"
	((SCANOPTIONNB++))
	echo
fi

if [ "${nmapFlag}" = true ] || [ "${allFlag}" = true ]
then
	# cleanup existing ./nmap.oG and ./nmap_summary.txt from previous scan
	sudo rm ./nmap.oG 2>/dev/null
	sudo rm ./nmap_summary.txt 2>/dev/null
	printf "\t($SCANOPTIONNB) Running command: sudo nmap -Pn -sV -A -T4 -p- -iL ${live_hosts_file_in_use} -oN ./nmap.txt -oG nmap.oG\n"
	#sudo nmap -Pn -sV -A -T4 -p- -iL ./live_hosts.txt -oN ./nmap.txt -oG ./nmap.oG
	sudo nmap -Pn -sV -A -T4 -p- -iL ${live_hosts_file_in_use} -oN ./nmap.txt -oG ./nmap.oG
	printf "\t($SCANOPTIONNB) nmap complete!\n"
	((SCANOPTIONNB++))
	echo
fi

printf "\t($SCANOPTIONNB) Creating summaries for rustscan and nmap\n"

if [ "${rustscanFlag}" = true ] || [ "${allFlag}" = true ]
then
	printf "\t\tPreparing rustscan summary and saving to ./rustscan_summary.txt\n"
	cat ./rustscan.txt | awk '/Open /' | sort | cut -d ' ' -f 2 > ./temp_rs.txt
	cat ./temp_rs.txt | cut -d ':' -f 1 | sort | uniq > ./temp_rs_hosts.txt
	cat ./temp_rs_hosts.txt | while read LINE
		do
			echo "OS detection results for host $LINE -> $(cat ./rustscan.oG | grep ${LINE} | grep OS | cut -d$'\t' -f 3)" >> ./rustscan_summary.txt
			cat ./temp_rs.txt | grep "$LINE" | cut -d ':' -f 2 | sort -g | uniq > ./temp_rs_"$LINE"_ports.txt
			echo "Host $LINE has $(wc -l ./temp_rs_${LINE}_ports.txt | cut -d " " -f 1) open ports:" >> ./rustscan_summary.txt
			cat ./temp_rs_"$LINE"_ports.txt >> ./rustscan_summary.txt
		done
	rm ./temp_rs*
	#rm ./rustscan.oG
	printf "\t\tRustscan summary ready!\n"
	echo
fi

if [ "${nmapFlag}" = true ] || [ "${allFlag}" = true ]
then
	printf "\t\tPreparing nmap summary and saving to ./nmap_summary.txt\n"
	cat ./nmap.txt | awk '/Nmap scan report for/ || (/open/ && ( /tcp/ || /udp/) )' > ./temp_ns.txt
	cat ./nmap.oG | grep OS | cut -d$'\t' -f1,4-4 >> ./nmap_summary.txt
	awk 'function output() { print "Host", ip, "has", count, "open ports."; count=0 }
		/Nmap/ && count { output() }
		/Nmap/ { ip=$NF }
		/open/ { count++ }
	END{ output() }' ./temp_ns.txt >> ./nmap_summary.txt
	echo "" >> ./nmap_summary.txt
	cat ./temp_ns.txt >> ./nmap_summary.txt
	rm temp_ns*
	#rm ./nmap.oG
	printf "\t\tNmap summary ready!\n"
	echo
fi

printf "\t($SCANOPTIONNB) Summaries for rustscan and nmap ready!\n"

((SCANOPTIONNB++))